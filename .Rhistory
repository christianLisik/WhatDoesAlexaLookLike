sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
out <- stratified(df, c("latinSquare"), 0.8)
View(out)
test <- anti_join(df, train)
test <- dplyr.anti_join(df, train)
test <- dplyr:anti_join(df, train)
library(dplyr)
test <- anti_join(df, train)
test <- subset(df, !(train %in% df))
train <- stratified(df, c("latinSquare"), 0.8)
test <- subset(df, !(train %in% df))
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- subset(df, !(train %in% df))
View(df)
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
install.packages(dplyr)
install.packages("dplyr")
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- subset(df, !(train %in% df))
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
View(df)
ip <- as.data.frame(installed.packages())
head(ip)
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages(c("dplyr", "ggplot2", "splitstackshape"))
install.packages(c("dplyr", "ggplot2", "splitstackshape"))
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- subset(df, !(train %in% df))
test <- anti_join(df, train)
test <- anti_join(df, train, by = c("latinSquare", "faceGender", "faceStyle", "skinDetails", "skinColor", "hairColor", "eyeColor", "eyeShape", "eyeOpening", "eyeSize", "eyeHeight", "eyeDistance", "eyeDepth", "eyeRotation", "eyebrowsColor", "eyebrowsShape", "eyebrowsLine", "noseShape", "noseLength", "noseWidth", "noseBridge", "noseCartilage", "foreheadHeight", "cheeksBone", "jawShape", "jawChin", "jawLength", "throatSize", "earSize", "mouthVolume", "lipRatio", "mouthOverlap", "mouthWidth", "mouthHeight", "mouthDepth", "eyeShadow", "lipStick", "rouge"))
model <- glm(latinSquare~., family=binomial(link="logit"), data=train)
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=200)
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300000)
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
summary(model)
library(pscl)
install.packages(pscl)
install.packages("pscl")
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata=test, type="response")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$latinSquare)
print(paste("Accuracy", 1 - misClasificError))
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- anti_join(df, train, by = c("latinSquare", "faceGender", "faceStyle", "skinDetails", "skinColor", "hairColor", "eyeColor", "eyeShape", "eyeOpening", "eyeSize", "eyeHeight", "eyeDistance", "eyeDepth", "eyeRotation", "eyebrowsColor", "eyebrowsShape", "eyebrowsLine", "noseShape", "noseLength", "noseWidth", "noseBridge", "noseCartilage", "foreheadHeight", "cheeksBone", "jawShape", "jawChin", "jawLength", "throatSize", "earSize", "mouthVolume", "lipRatio", "mouthOverlap", "mouthWidth", "mouthHeight", "mouthDepth", "eyeShadow", "lipStick", "rouge"))
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
summary(model)
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata=test, type="response")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$latinSquare)
print(paste("Accuracy", 1 - misClasificError))
View(df)
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- anti_join(df, train, by = c("latinSquare", "faceGender", "faceStyle", "skinDetails", "skinColor", "hairColor", "eyeColor", "eyeShape", "eyeOpening", "eyeSize", "eyeHeight", "eyeDistance", "eyeDepth", "eyeRotation", "eyebrowsColor", "eyebrowsShape", "eyebrowsLine", "noseShape", "noseLength", "noseWidth", "noseBridge", "noseCartilage", "foreheadHeight", "cheeksBone", "jawShape", "jawChin", "jawLength", "throatSize", "earSize", "mouthVolume", "lipRatio", "mouthOverlap", "mouthWidth", "mouthHeight", "mouthDepth", "eyeShadow", "lipStick", "rouge"))
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
summary(model)
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata=test, type="response")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$latinSquare)
print(paste("Accuracy", 1 - misClasificError))
#we have a significantly better working logistic regression model in python
#logistic regression end
#remove latinSquare so the names dont distort the graph
AgentNames <- df$latinSquare
df <- df %>%
select(-matches("latin"))
d <- dist(df)
fit <- cmdscale(d, eig = TRUE, k=2)
x <- fit$points[, 1]
y <- fit$points[, 2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = AgentNames, cex=.7)
library(ggplot2)
points <- data.frame(fit$points)
shapes <- c(16, 17, 18, 19, 20, 15)
shapes <- shapes[as.numeric(AgentNames)]
colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF")
colors <- colors[as.numeric(AgentNames)]
ggplot(points, aes(x=X1, y=X2, shape=AgentNames, color=AgentNames)) + geom_point(size=3) + theme_classic()# + stat_ellipse()
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- anti_join(df, train, by = c("latinSquare", "faceGender", "faceStyle", "skinDetails", "skinColor", "hairColor", "eyeColor", "eyeShape", "eyeOpening", "eyeSize", "eyeHeight", "eyeDistance", "eyeDepth", "eyeRotation", "eyebrowsColor", "eyebrowsShape", "eyebrowsLine", "noseShape", "noseLength", "noseWidth", "noseBridge", "noseCartilage", "foreheadHeight", "cheeksBone", "jawShape", "jawChin", "jawLength", "throatSize", "earSize", "mouthVolume", "lipRatio", "mouthOverlap", "mouthWidth", "mouthHeight", "mouthDepth", "eyeShadow", "lipStick", "rouge"))
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
summary(model)
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata=test, type="response")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$latinSquare)
print(paste("Accuracy", 1 - misClasificError))
#we have a significantly better working logistic regression model in python
#logistic regression end
#remove latinSquare so the names dont distort the graph
AgentNames <- df$latinSquare
df <- df %>%
select(-matches("latin"))
d <- dist(df)
fit <- cmdscale(d, eig = TRUE, k=2)
x <- fit$points[, 1]
y <- fit$points[, 2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = AgentNames, cex=.7)
library(ggplot2)
points <- data.frame(fit$points)
shapes <- c(16, 17, 18, 19, 20, 15)
shapes <- shapes[as.numeric(AgentNames)]
colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF")
colors <- colors[as.numeric(AgentNames)]
ggplot(points, aes(x=X1, y=X2, shape=AgentNames, color=AgentNames)) + geom_point(size=3) + theme_classic()# + stat_ellipse()
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- anti_join(df, train, by = c("latinSquare", "faceGender", "faceStyle", "skinDetails", "skinColor", "hairColor", "eyeColor", "eyeShape", "eyeOpening", "eyeSize", "eyeHeight", "eyeDistance", "eyeDepth", "eyeRotation", "eyebrowsColor", "eyebrowsShape", "eyebrowsLine", "noseShape", "noseLength", "noseWidth", "noseBridge", "noseCartilage", "foreheadHeight", "cheeksBone", "jawShape", "jawChin", "jawLength", "throatSize", "earSize", "mouthVolume", "lipRatio", "mouthOverlap", "mouthWidth", "mouthHeight", "mouthDepth", "eyeShadow", "lipStick", "rouge"))
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
summary(model)
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata=test, type="response")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$latinSquare)
print(paste("Accuracy", 1 - misClasificError))
#we have a significantly better working logistic regression model in python
#logistic regression end
#remove latinSquare so the names dont distort the graph
AgentNames <- df$latinSquare
df <- df %>%
select(-matches("latin"))
d <- dist(df)
fit <- cmdscale(d, eig = TRUE, k=2)
x <- fit$points[, 1]
y <- fit$points[, 2]
#plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
#     main="Metric MDS", type="n")
#text(x, y, labels = AgentNames, cex=.7)
library(ggplot2)
points <- data.frame(fit$points)
shapes <- c(16, 17, 18, 19, 20, 15)
shapes <- shapes[as.numeric(AgentNames)]
colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF")
colors <- colors[as.numeric(AgentNames)]
ggplot(points, aes(x=X1, y=X2, shape=AgentNames, color=AgentNames)) + geom_point(size=3) + theme_classic()# + stat_ellipse()
df <- read.csv("./trials.csv")
SECONDS_IN_AN_HOUR <- 60*60
MILLISECONDS_IN_AN_HOUR <- SECONDS_IN_AN_HOUR * 1000
library(dplyr)
#rename A-F to actual agent names:
#df$latinSquare = switch(df$latinSquare, "A"="AlexaF", "B"="SiriF", "C"="CortanaF", "D"="SiriM", "E"="GoogleF", "F"="RobotM")
levels(df$latinSquare) <- c("AlexaF", "SiriF", "CortanaF", "SiriM", "GoogleF", "RobotM")
#drop rows we consider invalid based on Schwind paper's approach (gender and age related differences in designing the characteristics of stereotypical virtual faces)
#df<-df[!((df$faceGenderClk:df$rougeClk)>0)]
#df$faceGenderClk:df$rougeClk
#remove rows where session time exceeded 6 hours
df<-df[!(df$timeMainSessionTime > 6 * MILLISECONDS_IN_AN_HOUR),]
#remove rows where participant didn't click any sliders
#df <- df[!(sum(df$faceGenderClk:df$rougeClk) > 0)]
cols = grep(pattern = "Clk$", names(df), value=TRUE)
sums = rowSums(df[cols])
df <- df[sums != 0, ]
remove(cols)
remove(sums)
#remove rows where screen resolution was below 1280p
df<-df[!(df$screenWidth < 1280),]
#remove columns we don't need
df <- df %>%
select(-matches("Rst|MM|Clk"))
remove_columns <- c("trialid", "sessions", "userUID", "theAge", "theGender", "theCountry", "hasKnowledgeSmartSpeaker", "playingGames", "watchingMovies", "acceptTOU", "finalQuestion1", "finalQuestion2", "finalQuestion3", "finalQuestion4", "finalQuestion5", "finalQuestion6", "ipadress", "screenWidth", "screenHeight", "systemLanguage", "userLanguage", "cookies", "platform", "appCodeName", "appVersion", "product", "browser", "webgl", "timeDate", "timeWelcome", "timeStart", "timeEnd", "timeMainSessionTime", "timeDuration", "faceGenderClk", "faceStyleClk", "skinDetailsClk", "skinColorClk", "hairColorClk", "eyeColorClk", "eyeShapeClk", "eyeOpeningClk", "eyeSizeClk", "eyeHeightClk", "eyeDistanceClk", "eyeDepthClk", "eyeRotationClk", "eyebrowsColorClk", "eyebrowsShapeClk", "eyebrowsLineClk", "noseShapeClk", "noseLengthClk", "noseWidthClk", "noseBridgeClk", "noseCartilageClk", "foreheadHeightClk", "cheeksBoneClk", "jawShapeClk", "jawChinClk", "jawLengthClk", "earSizeClk", "throatSizeClk", "mouthVolumeClk", "lipRatioClk", "mouthOverlapClk", "mouthWidthClk", "mouthHeightClk", "mouthDepthClk", "eyeShadowClk", "lipStickClk", "rougeClk", "generalMoreBtnClicked", "eyesMoreBtnClicked", "eyebrowsMoreBtnClicked", "noseMoreBtnClicked", "mouthMoreBtnClicked", "makeUpMoreBtnClicked", "outerfaceMoreBtnClicked", "jawMoreBtnClicked", "mainResetClicked", "interfaceResetClicked", "lightsClicked", "todoMoreBtnClicked", "sendClicked"
)
df <- df[, !colnames(df) %in% remove_columns, drop = FALSE]
write.csv(df, "cleaned_trials_for_python.csv")
#logistic regression start
#library(scorecard)
#dt_list <- split_df(df, ratio=0.75, seed=42)
library(splitstackshape)
set.seed(42)
train <- stratified(df, c("latinSquare"), 0.8)
test <- anti_join(df, train, by = c("latinSquare", "faceGender", "faceStyle", "skinDetails", "skinColor", "hairColor", "eyeColor", "eyeShape", "eyeOpening", "eyeSize", "eyeHeight", "eyeDistance", "eyeDepth", "eyeRotation", "eyebrowsColor", "eyebrowsShape", "eyebrowsLine", "noseShape", "noseLength", "noseWidth", "noseBridge", "noseCartilage", "foreheadHeight", "cheeksBone", "jawShape", "jawChin", "jawLength", "throatSize", "earSize", "mouthVolume", "lipRatio", "mouthOverlap", "mouthWidth", "mouthHeight", "mouthDepth", "eyeShadow", "lipStick", "rouge"))
model <- glm(latinSquare~., family=binomial(link="logit"), data=train, maxit=300)
summary(model)
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata=test, type="response")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$latinSquare)
print(paste("Accuracy", 1 - misClasificError))
#we have a significantly better working logistic regression model in python
#logistic regression end
#remove latinSquare so the names dont distort the graph
AgentNames <- df$latinSquare
df <- df %>%
select(-matches("latin"))
d <- dist(df)
fit <- cmdscale(d, eig = TRUE, k=2)
x <- fit$points[, 1]
y <- fit$points[, 2]
#plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
#     main="Metric MDS", type="n")
#text(x, y, labels = AgentNames, cex=.7)
library(ggplot2)
points <- data.frame(fit$points)
shapes <- c(16, 17, 18, 19, 20, 15)
shapes <- shapes[as.numeric(AgentNames)]
colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF")
colors <- colors[as.numeric(AgentNames)]
ggplot(points, aes(x=X1, y=X2, shape=AgentNames, color=AgentNames)) + geom_point(size=3) + theme_classic()# + stat_ellipse()
